#!/usr/bin/env python3

import os
import sys
import subprocess
import time

def cmd_type_get(instance_id):
    """Report the instance type"""
    try:
        result = subprocess.run([
            'aws', 'ec2', 'describe-instances',
            '--instance-id', instance_id,
            '--query', 'Reservations[].Instances[].InstanceType',
            '--output', 'text'
        ], capture_output=True, text=True, check=True)
        print(result.stdout.strip())
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def cmd_type_set(instance_id, instance_type):
    """Set the instance type"""
    try:
        result = subprocess.run([
            'aws', 'ec2', 'modify-instance-attribute',
            '--instance-id', instance_id,
            '--instance-type', instance_type
        ], capture_output=True, text=True, check=True)
        print(f"Instance type set to {instance_type}")
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def cmd_type(instance_id, args):
    """Report or set the instance type"""
    if len(args) == 0:
        cmd_type_get(instance_id)
    else:
        cmd_type_set(instance_id, args[0])

def cmd_state(instance_id):
    """Report the instance state"""
    try:
        result = subprocess.run([
            'aws', 'ec2', 'describe-instances',
            '--instance-id', instance_id,
            '--query', 'Reservations[].Instances[].State.Name',
            '--output', 'text'
        ], capture_output=True, text=True, check=True)
        print(result.stdout.strip())
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def cmd_start(instance_id):
    """Start the instance and wait until it's running, then report IP"""
    try:
        # Issue start command
        result = subprocess.run([
            'aws', 'ec2', 'start-instances',
            '--instance-ids', instance_id
        ], capture_output=True, text=True, check=True)
        print(f"Starting instance {instance_id}")
        
        # Poll state until running
        while True:
            result = subprocess.run([
                'aws', 'ec2', 'describe-instances',
                '--instance-id', instance_id,
                '--query', 'Reservations[].Instances[].State.Name',
                '--output', 'text'
            ], capture_output=True, text=True, check=True)
            
            state = result.stdout.strip()
            print(f"Current state: {state}")
            
            if state == "running":
                print("Instance running")
                
                # Get and report public IP
                ip_result = subprocess.run([
                    'aws', 'ec2', 'describe-instances',
                    '--instance-id', instance_id,
                    '--query', 'Reservations[].Instances[].PublicIpAddress',
                    '--output', 'text'
                ], capture_output=True, text=True, check=True)
                
                ip = ip_result.stdout.strip()
                if ip and ip != "None":
                    print(f"Public IP: {ip}")
                else:
                    print("No public IP address assigned")
                break
            elif state in ["pending"]:
                time.sleep(5)  # Wait 5 seconds before checking again
            else:
                print(f"Unexpected state: {state}")
                break
                
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def cmd_stop(instance_id):
    """Stop the instance and wait until it's stopped"""
    try:
        # Issue stop command
        result = subprocess.run([
            'aws', 'ec2', 'stop-instances',
            '--instance-ids', instance_id
        ], capture_output=True, text=True, check=True)
        print(f"Stopping instance {instance_id}")
        
        # Poll state until stopped
        while True:
            result = subprocess.run([
                'aws', 'ec2', 'describe-instances',
                '--instance-id', instance_id,
                '--query', 'Reservations[].Instances[].State.Name',
                '--output', 'text'
            ], capture_output=True, text=True, check=True)
            
            state = result.stdout.strip()
            print(f"Current state: {state}")
            
            if state == "stopped":
                print("Instance stopped")
                break
            elif state in ["stopping"]:
                time.sleep(5)  # Wait 5 seconds before checking again
            else:
                print(f"Unexpected state: {state}")
                break
                
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def cmd_ip(instance_id):
    """Report the public IP address"""
    try:
        result = subprocess.run([
            'aws', 'ec2', 'describe-instances',
            '--instance-id', instance_id,
            '--query', 'Reservations[].Instances[].PublicIpAddress',
            '--output', 'text'
        ], capture_output=True, text=True, check=True)
        ip = result.stdout.strip()
        if ip and ip != "None":
            print(ip)
        else:
            print("No public IP address assigned")
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def get_root_volume_id(instance_id):
    """Get the root volume ID for the instance"""
    try:
        result = subprocess.run([
            'aws', 'ec2', 'describe-instances',
            '--instance-id', instance_id,
            '--query', 'Reservations[].Instances[].BlockDeviceMappings[?DeviceName==`/dev/sda1` || DeviceName==`/dev/xvda`].Ebs.VolumeId',
            '--output', 'text'
        ], capture_output=True, text=True, check=True)
        volume_id = result.stdout.strip()
        if volume_id and volume_id != "None":
            return volume_id
        else:
            print("No root volume found")
            sys.exit(1)
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def cmd_volume_size_get(volume_id):
    """Report the current volume size"""
    try:
        result = subprocess.run([
            'aws', 'ec2', 'describe-volumes',
            '--volume-ids', volume_id,
            '--query', 'Volumes[].Size',
            '--output', 'text'
        ], capture_output=True, text=True, check=True)
        current_size = result.stdout.strip()
        print(f"{current_size} GB")
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def cmd_volume_size_set(volume_id, new_size):
    """Set the volume to a new size"""
    try:
        new_size = int(new_size)
    except ValueError:
        print("Error: Volume size must be a number")
        sys.exit(1)
    
    # Get current size to validate
    try:
        result = subprocess.run([
            'aws', 'ec2', 'describe-volumes',
            '--volume-ids', volume_id,
            '--query', 'Volumes[].Size',
            '--output', 'text'
        ], capture_output=True, text=True, check=True)
        current_size = int(result.stdout.strip())
        
        if new_size <= current_size:
            print(f"Error: New size ({new_size} GB) must be larger than current size ({current_size} GB)")
            sys.exit(1)
            
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)
    except ValueError:
        print("Error: Could not parse current volume size")
        sys.exit(1)
    
    # Modify volume
    try:
        result = subprocess.run([
            'aws', 'ec2', 'modify-volume',
            '--volume-id', volume_id,
            '--size', str(new_size)
        ], capture_output=True, text=True, check=True)
        print(f"Resizing volume from {current_size} GB to {new_size} GB...")
        
        # Poll modification status
        while True:
            result = subprocess.run([
                'aws', 'ec2', 'describe-volumes-modifications',
                '--volume-ids', volume_id,
                '--query', 'VolumesModifications[].ModificationState',
                '--output', 'text'
            ], capture_output=True, text=True, check=True)
            
            state = result.stdout.strip()
            print(f"Modification state: {state}")
            
            if state in ["completed", "optimizing"]:
                print(f"Volume resize completed to {new_size} GB")
                print("Note: You may need to extend the filesystem within the instance")
                break
            elif state in ["modifying"]:
                time.sleep(5)
            elif state == "failed":
                print("Volume modification failed")
                sys.exit(1)
            else:
                print(f"Unexpected modification state: {state}")
                break
                
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def cmd_volume_size(instance_id, args):
    """Report or set the root volume size"""
    volume_id = get_root_volume_id(instance_id)
    
    if len(args) == 0:
        cmd_volume_size_get(volume_id)
    else:
        cmd_volume_size_set(volume_id, args[0])

def main():
    if len(sys.argv) < 2:
        print("Usage: ec2 <command> [args]")
        print("Commands:")
        print("  type [type]    - Report current instance type or set to [type]")
        print("  state          - Report the instance state")
        print("  start          - Start the instance")
        print("  stop           - Stop the instance")
        print("  ip             - Report the public IP address")
        print("  volume-size [size] - Report current volume size or resize to [size] GB")
        sys.exit(1)
    
    command = sys.argv[1]
    args = sys.argv[2:]
    
    # Check for required environment variable
    instance_id = os.environ.get('INSTANCE_ID')
    if not instance_id:
        print("Error: INSTANCE_ID environment variable is not set")
        sys.exit(1)
    
    # Command dispatch
    if command == "type":
        cmd_type(instance_id, args)
    elif command == "state":
        cmd_state(instance_id)
    elif command == "start":
        cmd_start(instance_id)
    elif command == "stop":
        cmd_stop(instance_id)
    elif command == "ip":
        cmd_ip(instance_id)
    elif command == "volume-size":
        cmd_volume_size(instance_id, args)
    else:
        print(f"Unknown command: {command}")
        print("Available commands: type, state, start, stop, ip, volume-size")
        sys.exit(1)

if __name__ == "__main__":
    main()