#!/usr/bin/env python3

import os
import sys
import subprocess
import time
import json

def cmd_type_get(instance_id):
    """Report the instance type"""
    try:
        result = subprocess.run([
            'aws', 'ec2', 'describe-instances',
            '--instance-id', instance_id,
            '--query', 'Reservations[].Instances[].InstanceType',
            '--output', 'text'
        ], capture_output=True, text=True, check=True)
        print(result.stdout.strip())
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def cmd_type_set(instance_id, instance_type):
    """Set the instance type"""
    try:
        result = subprocess.run([
            'aws', 'ec2', 'modify-instance-attribute',
            '--instance-id', instance_id,
            '--instance-type', instance_type
        ], capture_output=True, text=True, check=True)
        print(f"Instance type set to {instance_type}")
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def cmd_type(instance_id, args):
    """Report or set the instance type"""
    if len(args) == 0:
        # No args: get type of current instance
        cmd_type_get(instance_id)
    elif len(args) == 1:
        # One arg: get type of specified instance
        target_instance_id = resolve_instance_id(args[0])
        cmd_type_get(target_instance_id)
    elif len(args) == 2:
        # Two args: set type of specified instance
        target_instance_id = resolve_instance_id(args[0])
        cmd_type_set(target_instance_id, args[1])
    else:
        print("Usage: type [instance] [new_type]")
        sys.exit(1)

def cmd_name_get(instance_id):
    """Report the instance Name tag"""
    try:
        result = subprocess.run([
            'aws', 'ec2', 'describe-instances',
            '--instance-id', instance_id,
            '--query', 'Reservations[].Instances[].Tags[?Key==`Name`].Value',
            '--output', 'text'
        ], capture_output=True, text=True, check=True)
        name = result.stdout.strip()
        if name and name != "None":
            print(name)
        else:
            print("(no name)")
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def cmd_name_set(instance_id, name):
    """Set the instance Name tag"""
    try:
        result = subprocess.run([
            'aws', 'ec2', 'create-tags',
            '--resources', instance_id,
            '--tags', f'Key=Name,Value={name}'
        ], capture_output=True, text=True, check=True)
        print(f"Instance name set to '{name}'")
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def cmd_name(instance_id, args):
    """Report or set the instance Name tag"""
    if len(args) == 0:
        # No args: get name of current instance
        cmd_name_get(instance_id)
    elif len(args) == 1:
        # One arg: get name of specified instance
        target_instance_id = resolve_instance_id(args[0])
        cmd_name_get(target_instance_id)
    elif len(args) == 2:
        # Two args: set name of specified instance
        target_instance_id = resolve_instance_id(args[0])
        cmd_name_set(target_instance_id, args[1])
    else:
        print("Usage: name [instance] [new_name]")
        sys.exit(1)

def cmd_state(instance_id):
    """Report the instance state"""
    try:
        result = subprocess.run([
            'aws', 'ec2', 'describe-instances',
            '--instance-id', instance_id,
            '--query', 'Reservations[].Instances[].State.Name',
            '--output', 'text'
        ], capture_output=True, text=True, check=True)
        print(result.stdout.strip())
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def cmd_start(instance_id):
    """Start the instance and wait until it's running, then report IP"""
    try:
        # Issue start command
        result = subprocess.run([
            'aws', 'ec2', 'start-instances',
            '--instance-ids', instance_id
        ], capture_output=True, text=True, check=True)
        print(f"Starting instance {instance_id}")
        
        # Poll state until running
        while True:
            result = subprocess.run([
                'aws', 'ec2', 'describe-instances',
                '--instance-id', instance_id,
                '--query', 'Reservations[].Instances[].State.Name',
                '--output', 'text'
            ], capture_output=True, text=True, check=True)
            
            state = result.stdout.strip()
            print(f"Current state: {state}")
            
            if state == "running":
                print("Instance running")
                
                # Get and report public IP
                ip_result = subprocess.run([
                    'aws', 'ec2', 'describe-instances',
                    '--instance-id', instance_id,
                    '--query', 'Reservations[].Instances[].PublicIpAddress',
                    '--output', 'text'
                ], capture_output=True, text=True, check=True)
                
                ip = ip_result.stdout.strip()
                if ip and ip != "None":
                    print(f"Public IP: {ip}")
                else:
                    print("No public IP address assigned")
                break
            elif state in ["pending"]:
                time.sleep(5)  # Wait 5 seconds before checking again
            else:
                print(f"Unexpected state: {state}")
                break
                
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def cmd_stop(instance_id, args):
    """Stop the instance and wait until it's stopped"""
    # Determine which instance to stop
    if len(args) > 0:
        target_instance_id = resolve_instance_id(args[0])
    else:
        target_instance_id = instance_id
    
    try:
        # Issue stop command
        result = subprocess.run([
            'aws', 'ec2', 'stop-instances',
            '--instance-ids', target_instance_id
        ], capture_output=True, text=True, check=True)
        print(f"Stopping instance {target_instance_id}")
        
        # Poll state until stopped
        while True:
            result = subprocess.run([
                'aws', 'ec2', 'describe-instances',
                '--instance-id', target_instance_id,
                '--query', 'Reservations[].Instances[].State.Name',
                '--output', 'text'
            ], capture_output=True, text=True, check=True)
            
            state = result.stdout.strip()
            print(f"Current state: {state}")
            
            if state == "stopped":
                print("Instance stopped")
                break
            elif state in ["stopping"]:
                time.sleep(5)  # Wait 5 seconds before checking again
            else:
                print(f"Unexpected state: {state}")
                break
                
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def cmd_ip(instance_id):
    """Report the public IP address"""
    try:
        result = subprocess.run([
            'aws', 'ec2', 'describe-instances',
            '--instance-id', instance_id,
            '--query', 'Reservations[].Instances[].PublicIpAddress',
            '--output', 'text'
        ], capture_output=True, text=True, check=True)
        ip = result.stdout.strip()
        if ip and ip != "None":
            print(ip)
        else:
            print("No public IP address assigned")
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def get_root_volume_id(instance_id):
    """Get the root volume ID for the instance"""
    try:
        result = subprocess.run([
            'aws', 'ec2', 'describe-instances',
            '--instance-id', instance_id,
            '--query', 'Reservations[].Instances[].BlockDeviceMappings[?DeviceName==`/dev/sda1` || DeviceName==`/dev/xvda`].Ebs.VolumeId',
            '--output', 'text'
        ], capture_output=True, text=True, check=True)
        volume_id = result.stdout.strip()
        if volume_id and volume_id != "None":
            return volume_id
        else:
            print("No root volume found")
            sys.exit(1)
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def cmd_volume_size_get(volume_id):
    """Report the current volume size"""
    try:
        result = subprocess.run([
            'aws', 'ec2', 'describe-volumes',
            '--volume-ids', volume_id,
            '--query', 'Volumes[].Size',
            '--output', 'text'
        ], capture_output=True, text=True, check=True)
        current_size = result.stdout.strip()
        print(f"{current_size} GB")
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def cmd_volume_size_set(volume_id, new_size):
    """Set the volume to a new size"""
    try:
        new_size = int(new_size)
    except ValueError:
        print("Error: Volume size must be a number")
        sys.exit(1)
    
    # Get current size to validate
    try:
        result = subprocess.run([
            'aws', 'ec2', 'describe-volumes',
            '--volume-ids', volume_id,
            '--query', 'Volumes[].Size',
            '--output', 'text'
        ], capture_output=True, text=True, check=True)
        current_size = int(result.stdout.strip())
        
        if new_size <= current_size:
            print(f"Error: New size ({new_size} GB) must be larger than current size ({current_size} GB)")
            sys.exit(1)
            
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)
    except ValueError:
        print("Error: Could not parse current volume size")
        sys.exit(1)
    
    # Modify volume
    try:
        result = subprocess.run([
            'aws', 'ec2', 'modify-volume',
            '--volume-id', volume_id,
            '--size', str(new_size)
        ], capture_output=True, text=True, check=True)
        print(f"Resizing volume from {current_size} GB to {new_size} GB...")
        
        # Poll modification status
        while True:
            result = subprocess.run([
                'aws', 'ec2', 'describe-volumes-modifications',
                '--volume-ids', volume_id,
                '--query', 'VolumesModifications[].ModificationState',
                '--output', 'text'
            ], capture_output=True, text=True, check=True)
            
            state = result.stdout.strip()
            print(f"Modification state: {state}")
            
            if state in ["completed", "optimizing"]:
                print(f"Volume resize completed to {new_size} GB")
                print("Note: You may need to extend the filesystem within the instance")
                break
            elif state in ["modifying"]:
                time.sleep(5)
            elif state == "failed":
                print("Volume modification failed")
                sys.exit(1)
            else:
                print(f"Unexpected modification state: {state}")
                break
                
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)

def cmd_volume_size(instance_id, args):
    """Report or set the root volume size"""
    volume_id = get_root_volume_id(instance_id)
    
    if len(args) == 0:
        cmd_volume_size_get(volume_id)
    else:
        cmd_volume_size_set(volume_id, args[0])

def get_instance_config(instance_id):
    """Get instance configuration needed for cloning"""
    try:
        result = subprocess.run([
            'aws', 'ec2', 'describe-instances',
            '--instance-id', instance_id,
            '--output', 'json'
        ], capture_output=True, text=True, check=True)
        
        data = json.loads(result.stdout)
        if not data['Reservations'] or not data['Reservations'][0]['Instances']:
            print("Error: Instance not found")
            sys.exit(1)
            
        instance = data['Reservations'][0]['Instances'][0]
        
        config = {
            'image_id': instance['ImageId'],
            'instance_type': instance['InstanceType'], 
            'key_name': instance.get('KeyName'),
            'security_groups': [sg['GroupId'] for sg in instance['SecurityGroups']],
            'subnet_id': instance.get('SubnetId'),
            'iam_role': instance.get('IamInstanceProfile', {}).get('Arn')
        }
        
        return config
        
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)
    except (json.JSONDecodeError, KeyError) as e:
        print(f"Error parsing instance data: {e}")
        sys.exit(1)

def resolve_instance_id(identifier):
    """Resolve instance name or ID to actual instance ID"""
    # If it looks like an instance ID, return as-is
    if identifier.startswith('i-') and len(identifier) == 19:
        return identifier
    
    # Otherwise, treat it as a name and look up by Name tag
    try:
        result = subprocess.run([
            'aws', 'ec2', 'describe-instances',
            '--filters', f'Name=tag:Name,Values={identifier}',
            '--query', 'Reservations[].Instances[?State.Name!=`terminated`].InstanceId',
            '--output', 'json'
        ], capture_output=True, text=True, check=True)
        
        data = json.loads(result.stdout)
        instance_ids = [item for sublist in data for item in sublist]  # Flatten
        
        if len(instance_ids) == 0:
            print(f"Error: No instance found with name '{identifier}'")
            sys.exit(1)
        elif len(instance_ids) > 1:
            print(f"Error: Multiple instances found with name '{identifier}': {', '.join(instance_ids)}")
            sys.exit(1)
        
        return instance_ids[0]
        
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)
    except (json.JSONDecodeError, KeyError) as e:
        print(f"Error parsing instance data: {e}")
        sys.exit(1)

def cmd_list():
    """List all EC2 instances with ID, Name, and IP"""
    try:
        result = subprocess.run([
            'aws', 'ec2', 'describe-instances',
            '--output', 'json'
        ], capture_output=True, text=True, check=True)
        
        data = json.loads(result.stdout)
        
        instances = []
        for reservation in data['Reservations']:
            for instance in reservation['Instances']:
                # Skip terminated instances
                if instance['State']['Name'] == 'terminated':
                    continue
                    
                instance_id = instance['InstanceId']
                state = instance['State']['Name']
                instance_type = instance['InstanceType']
                
                # Get Name tag if it exists
                name = None
                for tag in instance.get('Tags', []):
                    if tag['Key'] == 'Name':
                        name = tag['Value']
                        break
                
                # Get public IP
                public_ip = instance.get('PublicIpAddress', 'None')
                
                instances.append({
                    'id': instance_id,
                    'name': name,
                    'state': state,
                    'type': instance_type,
                    'ip': public_ip
                })
        
        if not instances:
            print("No instances found")
            return
            
        # Print header
        print(f"{'Instance ID':<19} {'Name':<20} {'Type':<12} {'State':<10} {'Public IP'}")
        print("-" * 85)
        
        # Print instances
        for inst in instances:
            name_display = inst['name'] if inst['name'] else '(no name)'
            ip_display = inst['ip'] if inst['ip'] != 'None' else '(none)'
            print(f"{inst['id']:<19} {name_display:<20} {inst['type']:<12} {inst['state']:<10} {ip_display}")
            
    except subprocess.CalledProcessError as e:
        print(f"Error running AWS command: {e}")
        sys.exit(1)
    except (json.JSONDecodeError, KeyError) as e:
        print(f"Error parsing instance data: {e}")
        sys.exit(1)

def cmd_clone_mod_reduce_volume(instance_id):
    """Clone instance with reduced 100GB volume"""
    print(f"Cloning instance {instance_id} with 100GB volume...")
    
    # Get source instance configuration
    config = get_instance_config(instance_id)
    print(f"Source instance config: AMI {config['image_id']}, type {config['instance_type']}")
    
    # Build run-instances command
    cmd_args = [
        'aws', 'ec2', 'run-instances',
        '--image-id', config['image_id'],
        '--instance-type', config['instance_type'],
        '--block-device-mappings', 
        '[{"DeviceName":"/dev/sda1","Ebs":{"VolumeSize":100,"VolumeType":"gp3","DeleteOnTermination":true}}]'
    ]
    
    # Add optional parameters
    if config['key_name']:
        cmd_args.extend(['--key-name', config['key_name']])
    
    if config['security_groups']:
        cmd_args.extend(['--security-group-ids'] + config['security_groups'])
        
    if config['subnet_id']:
        cmd_args.extend(['--subnet-id', config['subnet_id']])
        
    if config['iam_role']:
        role_name = config['iam_role'].split('/')[-1]
        cmd_args.extend(['--iam-instance-profile', f'Name={role_name}'])
    
    try:
        result = subprocess.run(cmd_args, capture_output=True, text=True, check=True)
        
        # Parse instance ID from response
        instance_result = subprocess.run([
            'aws', 'ec2', 'describe-instances',
            '--filters', 'Name=instance-state-name,Values=pending,running',
            '--query', 'Reservations[].Instances[].[InstanceId,LaunchTime]',
            '--output', 'text'
        ], capture_output=True, text=True, check=True)
        
        # Get the most recently launched instance
        lines = instance_result.stdout.strip().split('\n')
        if lines:
            newest_instance = sorted(lines, key=lambda x: x.split('\t')[1])[-1]
            new_instance_id = newest_instance.split('\t')[0]
            print(f"New instance created: {new_instance_id}")
            print(f"Volume size: 100GB")
            return new_instance_id
        else:
            print("Error: Could not determine new instance ID")
            sys.exit(1)
            
    except subprocess.CalledProcessError as e:
        print(f"Error creating instance: {e}")
        if e.stderr:
            print(f"Error details: {e.stderr}")
        sys.exit(1)

def main():
    if len(sys.argv) < 2:
        print("Usage: ec2 <command> [args]")
        print("Commands:")
        print("  list           - List all EC2 instances with ID, Name, and IP")
        print("  type [instance] [new_type] - Get or set instance type")
        print("  name [instance] [new_name] - Get or set instance Name tag")
        print("  state          - Report the instance state")
        print("  start          - Start the instance")
        print("  stop [name|id] - Stop the instance (uses INSTANCE_ID if no arg)")
        print("  ip             - Report the public IP address")
        print("  volume-size [size] - Report current volume size or resize to [size] GB")
        print("  clone-mod-reduce-volume - Clone instance with 100GB volume")
        sys.exit(1)
    
    command = sys.argv[1]
    args = sys.argv[2:]
    
    # Commands that don't require INSTANCE_ID
    if command == "list":
        cmd_list()
        return
    
    # Check for required environment variable for other commands
    instance_id = os.environ.get('INSTANCE_ID')
    if not instance_id:
        print("Error: INSTANCE_ID environment variable is not set")
        sys.exit(1)
    
    # Command dispatch
    if command == "type":
        cmd_type(instance_id, args)
    elif command == "name":
        cmd_name(instance_id, args)
    elif command == "state":
        cmd_state(instance_id)
    elif command == "start":
        cmd_start(instance_id)
    elif command == "stop":
        cmd_stop(instance_id, args)
    elif command == "ip":
        cmd_ip(instance_id)
    elif command == "volume-size":
        cmd_volume_size(instance_id, args)
    elif command == "clone-mod-reduce-volume":
        cmd_clone_mod_reduce_volume(instance_id)
    else:
        print(f"Unknown command: {command}")
        print("Available commands: list, type, name, state, start, stop, ip, volume-size, clone-mod-reduce-volume")
        sys.exit(1)

if __name__ == "__main__":
    main()